1. A brief description of the project.
   sudo apt-get install graphviz
   dot out_t2.cpp.gv -Tpng -o out_dot.png

   UniversalIndentGUI
   sudo apt-get install universalindentgui
   indent -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2 -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob

	gedit Makefile parser_descent.cpp  parser_descent.h parser_descent_rules.cpp YACC_RULES_TODO
    kate Makefile parser_descent.cpp  parser_descent.h parser_descent_rules.cpp YACC_RULES_TODO semantic.cpp semantic.h symbols_table.h symbols_table.cpp

	gdb -q -x X abidos
    ulimit -c unlimited

    valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes --max-stackframe=4020472 ./abidos --verbose test/mass_clases.cpp
    ./$(EXECUTABLE)  test/$(FILE_TEST)
    

2. A pointer to the project website (if it has one).
3. Notes on the developerâ€™s build environment and potential portability problems.
4. A roadmap describing important files and subdirectories.
5. Either build/installation instructions or a pointer to a file containing same (usually INSTALL).
6. Either a maintainers/credits list or a pointer to a file containing same (usually CREDITS).
7. Either recent project news or a pointer to a file containing same (usually NEWS).
8. Project mailing list addresses.

todo
  -[] clear context when class has been processed
  -[v] put other field to know when a type is a class or a struct
  -[]

	-[v] table of types first for class and structs.
	-[] continue with the work of the yacc rules to get class definitions.
	-[] refactor test in a class.

show includes todo
-[] class config_parameters do like abidos/processor/options.cpp 
-[] refactor code from main.cpp to the previous class.
-[] move code inside of abidos/preprocessor.
-[] parser will be invoke from preprocesso
    mabye the easy way is create a big file preprocesed with gcc

abidos
-[v] draft first version of types_table.
-[v] draft first version of symbol_table.
-[v] class B : A { ... put public by default
-[v] symbols_table.h do vector<c_decl_specifier> t_vector_decl_specifier
-[v] put members in previous vector inside his class
-[v] investigate
	int c_parser_descent::type_specifier(string tab)
	{
	...
	if( 1 == class_specifier(tab) )
	{
		//## bad idea i need investigate other way to do this
		//		context = context_tokens.restore();
		return 1;
	}

	maybe in the call of the rule, or restore all but i_token not

	fix->context_tokens.restore_but_not_i_token(context);

-[v] fixed parser more than 3 members in oneline inside a class
-[v] in members whe store in map and in a vector to have fast access
     and to have original order
-[] print members put empty in vector
-[v] implement parse of functions members
-[v] implement symbol save of parametes of functions members.
-[] implement parse of free functions
-[v] implement symbol save of parametes of free functions
-[v] in semantic i must work in put in correct point of code vector_decl_specifier.clear();
-[] generate orignal .cpp or .h with information from ts.
-[v] f(int, char) in ts must have "f(int,char)" string name in member map.
    we must save f and parameters in context and in the ')' put this in ts.
-[v] use
	http://www.gnu.org/s/libc/manual/html_node/Getopt-Long-Option-Example.html#Getopt-Long-Option-Example 
	to create options.h struct c_options with the argv[] passed to the program
-[v] save the file and the line in the c_token
-[v] improve click in members of clasess.
-[v] if a funcion member have parameters with only tipes -> show only types.
-[v] indent preprocessor
-[] indent show_includes
-[v] put level in the printf of rules
-[] use t_class_specifier_status c_context::class_specifier_status in parser and in semantic
    now there are several flags doing this
-[v] parse free variables.
-[v] parse free functions.
-[v] parse private public protected inside classes.
-[v] generate original with previous.
-[v] generate graph with -, + showing if a member is private/protected or public
-[v] parsing free functions with body
-[v] parsing member functions with body
-[] generate original declaration of variables
-[] generate original free functions
-[v] put head arrows of class with not fill (like in UML specification)
-[v] reverse the positions of class fathers and sons (father up in diagrams)
-[] pass the body of functions (with a dummy rule)
