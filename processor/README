1. A brief description of the project.
   sudo apt-get install graphviz
   dot ../out/out_t002.cpp.gv -Tpng -o ../out/out_dot.png

   UniversalIndentGUI
   sudo apt-get install universalindentgui
   indent -nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2 -ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob


useful commands:

  find . -name "*.cpp" -exec grep -EHn "\<c_decl_specifier\>" {} \;

  git commit --amend -C HEAD

	gedit Makefile parser_descent.cpp  parser_descent.h parser_descent_rules.cpp YACC_RULES_TODO
    kate Makefile parser_descent.cpp  parser_descent.h parser_descent_rules.cpp YACC_RULES_TODO semantic.cpp semantic.h symbols_table.h symbols_table.cpp
 -q -x X abidos
    ulimit -c unlimited

    valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes --max-stackframe=4020472 ./abidos --verbose ../test/mass_clases.cpp| grep -E "==\d=="
    valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes --max-stackframe=4020472 ./abidos --verbose ../test/test_symbols_table.h| grep -E "==\d=="

    ./$(EXECUTABLE)  test/$(FILE_TEST)

cat ../out/trace_t030.cpp.gv | dot -Tpng > ../out/trace_t030.cpp.gv.png; eog ../out/trace_t030.cpp.gv.png

git bundle create abidos_$(date '+%F_%H_%M')_master.bundle master
mv abidos_2011-04-14_15_06_master.bundle /home/hevia/Descargas/
cd /home/hevia/Descargas/working/abidos
git pull /home/hevia/Descargas/abidos_2011-04-14_15_06_master.bundle master

make clean
tar -czvf working_$(date '+%F_%H_%M').tar.gz working/
tar -xzvf working_2011-03-12_16_18.tar.gz

git commit -C HEAD -a --amend

dot ../out/out_test_symbols_table.h.gv -Tpng -o ../out/out_test_symbols_table.h.png
dot ../out/out_test_symbols_table.h.gv -Tsvg -o ../out/out_test_symbols_table.h.svg

2. A pointer to the project website (if it has one).
3. Notes on the developerâ€™s build environment and potential portability problems.
4. A roadmap describing important files and subdirectories.
5. Either build/installation instructions or a pointer to a file containing same (usually INSTALL).
6. Either a maintainers/credits list or a pointer to a file containing same (usually CREDITS).
7. Either recent project news or a pointer to a file containing same (usually NEWS).
8. Project mailing list addresses.

todo
  -[] clear context when class has been processed
  -[v] put other field to know when a type is a class or a struct
  -[]

	-[v] table of types first for class and structs.
	-[] continue with the work of the yacc rules to get class definitions.
	-[] refactor test in a class.

show includes todo
-[] class config_parameters do like abidos/processor/options.cpp 
-[] refactor code from main.cpp to the previous class.
-[] move code inside of abidos/preprocessor.
-[] parser will be invoke from preprocesso
    maybe the easy way is create a big file preprocesed with gcc

abidos
-[v] draft first version of types_table.
-[v] draft first version of symbol_table.
-[v] class B : A { ... put public by default
-[v] symbols_table.h do vector<c_decl_specifier> t_vector_decl_specifier
-[v] put members in previous vector inside his class
-[v] investigate
	int c_parser_descent::type_specifier(string tab)
	{
	...
	if( 1 == class_specifier(tab) )
	{
		//## bad idea i need investigate other way to do this
		//		context = context_tokens.restore();
		return 1;
	}

	maybe in the call of the rule, or restore all but i_token not

	fix->context_tokens.restore_but_not_i_token(context);

-[v] fixed parser more than 3 members in oneline inside a class
-[v] in members whe store in map and in a vector to have fast access
     and to have original order
-[] print members put empty in vector
-[v] implement parse of functions members
-[v] implement symbol save of parametes of functions members.
-[] implement parse of free functions
-[v] implement symbol save of parametes of free functions
-[v] in semantic i must work in put in correct point of code vector_decl_specifier.clear();
-[] generate orignal .cpp or .h with information from ts.
-[v] f(int, char) in ts must have "f(int,char)" string name in member map.
    we must save f and parameters in context and in the ')' put this in ts.
-[v] use
	http://www.gnu.org/s/libc/manual/html_node/Getopt-Long-Option-Example.html#Getopt-Long-Option-Example 
	to create options.h struct c_options with the argv[] passed to the program
-[v] save the file and the line in the c_token
-[v] improve click in members of clasess.
-[v] if a funcion member have parameters with only tipes -> show only types.
-[v] indent preprocessor
-[] indent show_includes
-[v] put level in the printf of rules
-[] use t_class_specifier_status c_context::class_specifier_status in parser and in semantic
    now there are several flags doing this
-[v] parse free variables.
-[v] parse free functions.
-[v] parse private public protected inside classes.
-[v] generate original with previous.
-[v] generate graph with -, + showing if a member is private/protected or public
-[v] parsing free functions with body
-[v] parsing member functions with body
-[] generate original declaration of variables
-[] generate original free functions
-[v] put head arrows of class with not fill (like in UML specification)
-[v] reverse the positions of class fathers and sons (father up in diagrams)
-[v] pass the body of functions (with a dummy rule)
-[v] parse constructors
-[v] parse destructors
-[v] use is_constructor
-[v] use is_destructor
-[v] parse AUTO|REGISTER...
-[v] parse INLINE|VIRTUAL...
-[v] parse FRIEND
-[] do script to check generate original ~= original
-[v] count oks and fails tests
-[v] parse definitions of functions members outside of classes
     void A::fa(void)
-[v] parse definitions of constructors outside of classes
-[v] parse definitions of destructors outside of classes
-[v] semantic for definitons of functions members outside of clasess.
-[v] save the file and line for the previous point.
-[v] do get_full_name only with types of params 
    inside class A
        void f(int);
    outside class
        void A::f(int i){..}
-[v] constructors file outside of class
-[v] destructors file outside of class
-[v] parse '*' in declarations
-[v] parse '&' in declarations
      the 2 previous points has been done with ptr_specifier:
      i use this rule instead of prt_operator in some places
-[v] do new state to test/t022.cpp
    context.class_specifier_status 
    ...
      friend class A;
    ...
-[v] added to ts friends of classes
-[v] draw friend classes
-[v] draw compositions
-[v] draw aggregations
-[v] typedef parse typedef class A;
-[] typedef do create sinom in ts
-[v] use this fields
    int type_specifier;
    int function_specifier; <-- dropped
    int friend_specifier;   <-- dropped
    int typedef_specifier;  <-- dropped
    int has_colon_colon_after; // A:: ...
-[v] do c_parser_descent::cv_qualifier()
-[] do cv_qualifier_seq
-[v] refactor python output to can do:
    dot out/out_test_symbols_table.h.gv -Tpng -o out/out_test_symbols_table.h.png
-[v] typedef class A {} t_A;
-[v] reactive test 24.
-[v] change NO_CLASS_NAME for a tag sytem with number increment.
-[] draw typedefs like class with relation with his class type.
    t_A ---> class A
-[v] typedef t_int t2_int in ts t2_int should point to t_int.
-[v]  define classes inside classes.
-[v] parse thinks like this int A::A_2::A_2_1::A_2_1_f(int long p1){ }
-[-] refactor code from parser_descent to lexical_buffer
      for the moment i think is a litle bloat do this
-[v] in nodos names [out/out_run.py] A::A_2 changes for A__A_2
-[] change nodos names [out/out_run.py] A::A_2 changes for A__A_2 in compositions/aggreggations
-[] change nodos names [out/out_run.py] A::A_2 changes for A__A_2 in herences
-[v] in A::A_2::A_2_1::A_2_1_f it should search A_2_1_f in A::A_2::A_2_1
    ##: mark_x16 context.class_name_declaration [A::A_2::A_2_1]
    printf("##: mark_x17 context.class_name_declaration [%s]\n", context.class_name_declaration.c_str());
    i need further work here    
    maybe i can use semantic::vector_decl_specifier instead string parser_descent::colon_colon_chain;
    yes! that is;
-[v] change the trace system trace.*
-[v] code to generate tree calls of grammar trace.*
    cat out/trace_t001.cpp.gv | dot -Tpng > out/trace_t001.cpp.gv.png
-[v] imporve tree calls, now we can see the tokens consumed in the nodes.
-[v] do int token_is(int id, c_trace_node trace_node);
-[v] do int preanalisys(int id, c_trace_node trace_node);
-[v] this is confuse if ( ! token_is('(', trace_node) )
    maybe do if ( token_is_not('(', trace_node) )
-[v] fix trace.cpp put \\ only in characters what really need it
-[v] fix t017 jumping to funtions implementation to t029.cpp this purpouse.
-[v] fix t017 jumping to constructors definition t030.cpp created to this purpouse.
-[v] fix jumping destructors definition t030.cpp created to this purpouse.
-[v] t028 A::A_2::A_2_1::A_2_1() jumping to this...
-[v] t031 A::B::B() jumping to this...
-[v] t031 A::B::~B() dont show ~ in class graph
-[v] t032 before public: only the first is public in graph
    fixed partially when are not constructors/destructors with body in class
    cat out/trace_t032.cpp.gv | dot -Tpng > out/trace_t032.cpp.gv.png; eog out/trace_t032.cpp.gv.png
-[v] fix error in c_class_member * get(string member);
-[v] enhand preanalisys -> preanalisys_has_one passing vector to it.
-[v] t033 fix before A::A(){} class B{}; is parser as A::B
    cat out/trace_t033.cpp.gv | dot -Tpng > out/trace_t033.cpp.gv.png; eog out/trace_t033.cpp.gv.png
-[v] t027 typedef no name class soved with change NO_CLASS_NAME for a tag sytem with number increment.
-[v] prune decl_specifier '~' ';' t030 241_is_eof -> 227_is_eof
-[v] prune declarator ';' t030 227_is_eof -> 216_is_eof
-[v] do preprocessor
    http://www.taekwondo-wiki.com/2008/apidocs/flex-2.5.35.zip/flex_11.html#SEC15
    cat out/trace_t034.cpp.gv | dot -Tpng > out/trace_t034.cpp.gv.png; eog out/trace_t034.cpp.gv.png
    valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes --max-stackframe=4020472 ./abidos --verbose ../test/t034.cpp| grep -E "==\d=="
-[v] do preprocessor change pwd #include "h/h1.h" h1.h cand have #include "h2" in h directory
-[v] do parsing templates <>
    look this example http://www.cplusplus.com/doc/tutorial/templates/
    cat ../out/trace_t035.cpp.gv | dot -Tpng > ../out/trace_t035.cpp.gv.png; eog ../out/trace_t035.cpp.gv.png
    - [v] when store of the function in ts add <typename,typename> t035.cpp
        this code is valid in c++:
        template <class T>
        void f(T t)
        {
          ;
        }

        template <class T, class T2>
        void f(T t, T2 t2)
        {
          ;
        }
        in ts:
          ...
          first[f<typename>] id[258]->[IDENTIFIER] text[f]
          ...
          first[f<typename,typename>] id[258]->[IDENTIFIER] text[f]
          ...
    - [v] when store class t036.cpp
          ...
          template <class T, class T2, typename T3>
          class A {    
          ...
        in ts will be:
          first[A<typename,typename,typename>] id[258]->[IDENTIFIER] text[A] type[265]->[CLASS_NAME] class_key[300]->[CLASS]

        this does not necesary this is not allowed in C++:
          template <class T>
          class A{
            T a;
          };

          template <class T, class T2>
          class A{
            T a;
          };
        then in ts:
          first[A] id[258]->[IDENTIFIER] text[A] ...
    - [v] good moment to prune idenfiers in the mangled names of functions
       out_t012.cpp
        [PRIVATE]: [int] [unsigned] first[fa1(double float p1)]->[fa1]
        first[fa1(double float p1)]->[fa1]
       must be
        first[fa1(double float)]->[fa1]
    -[v] parse typename is like class in parameters declaration of templates
    -[v] generate diagrams puting classes templates surronded by < >
    -[v] in templates parse int... <class T1, int N>
      cat out/trace_t036.cpp.gv | dot -Tpng > out/trace_t036.cpp.gv.png; eog out/trace_t036.cpp.gv.png
-[v] do parsing instantation of templates
    for the moment is parse in type_specifier -> template_id
    cat ../out/trace_t037.cpp.gv | dot -Tpng > ../out/trace_t037.cpp.gv.png; eog ../out/trace_t037.cpp.gv.png
-[v] parsing definitios of functions ouside of namespaces
-[] do generate diagrams with namespaces like classes
-[v] save in ts instantation of templates
    t036.cpp [PRIVATE]: [int] first[a3]->[a3] [int] should be A3
    save in symbol the argumens of the template;
    A3<int> a3;
    -[v] continue saving template arguments in ts.
    -[v] print the arguments of templates in 
          void c_declarator::print(const char *tab)
        and
          void c_class_members::print(const char *tab)
          instead of TEMPLATE INSTANTATION
      vector_class_member [2]
      {
       ...
       [A3] <T is int,T2 is float>[a3]
      }
    -[v] save typedef A3<int,double> t_A3; in ts and print it
    -[v] typedef A3<int,double> t_A3;
    -[v] parsing constants/numbers A_2<int,1> a2; ant print it
        [A2] <T1 is int,N is 1>[a2]
    -[v] fix duplication of decl t036.cpp
      ...
      [PRIVATE]: [t_A3] [t_A3] first[a3_2]->[a3_2]
      ...
-[] generate diagram with relations between classes and his composite of template class
-[] parsing more templates, specialization parameters by default...
-[v] free functions void f( int i1, float f2); have 2 entries in ts
    first[f(int)]...
    first[f(int,float)]...
    fixed
-[] do parsing [const]
-[v] do parsing namespace
    look this example http://www.cplusplus.com/doc/tutorial/namespaces/
-[v] do parsing using namespace_name NAMESPACE_NAME
-[v] add to semantic the info parsing in using namespace NAMESPACE_NAME;
    vector<string> t_vector_using_namespace;
    map<string,string> t_map_using_namespace;
-[] use the previous structures to save alias of NAMESPACE_NAMES    
-[v] erase xdot2.pyc from history
    git filter-branch --index-filter 'git update-index --remove xdot2.pyc' 7dffeb6..HEAD
    git push --force --verbose --dry-run
    git push --force
-[v] in Makefile when does not exists create:
        mkdir out
        mkdir test_out
-[] pass file out in main parameter parser_descent yyparse()
-[v] rename abidos -> abydos in all project
    find . -name "*" -exec sed -e 's/abidos/abydos/g' {} \;
    the name of the project is abidos for the moment exists other projects and
    companies named abydos.
-[v] t031 void f(void); in diagram in A::B class appears:
    unsigned int * void f(void) fixed (see test/t031_01.cpp)
-[v] refactor code using token_is_one
-[v] fixed now preprocesor lines like #include <file> does not break the parser.
-[] in rules with for(;;) investigate
    for (;;) {
      ...
     if ( token_is_not(',', trace_node) ) {
        return 0 or 1;
      ...
-[] fix t013.cpp in the output:
    ...
    [void] [fa1]( [void] [void])
    ...
    sould be [void] [fa1]( [void] ) 
-[] do documentacion:
      http://linux.die.net/man/7/groff_ms
      http://www.gsp.com/cgi-bin/man.cgi?section=7&topic=groff_ms#4
  -[] main classes of project
  -[] why .y in the project
  -[] how the parser works
  -[] structures of ts
  -[] how class f(int i, float b) is saved in ts
  -[] how class A::B is saves in ts

-[v] fixed problem in generating tree trace with < and > symbols
  _7_template_parameter_list[label="{_7_template_parameter_list|[\> is 62->>]\l}", shape="record", color=green]
  _20_storage_class_specifier[label="{_20_storage_class_specifier|[template\ is_not AUTO\ REGISTER\ STATIC\ EXTERN\ MUTABLE]}", shape="record", color=black, style=dotted]
-[v] fix in simple_type_specifier: put first template_id
    if not type_name eats template_name or maybe std::vector must be TEMPLATE_NAME and not CLASS_NAME
  cat out/trace_t038.cpp.gv | dot -Tpng > out/trace_t038.cpp.gv.png; eog out/trace_t038.cpp.gv.png
  using namespace std;
  now t038 works:
  ...
  typedef vector<int> t_vector_int;
  fixe did not need change the order of template_id();
-[v] fix in t038.cpp
  //## the next line does not work
  //typedef std::vector<float> t_vector_float;
-[v] fix in t038.cpp
  //2 names equal -> crash
  using namespace std;
  typedef vector<string> t_vector_string;
  typedef vector<string> t_vector_string;
-[v] fixed parsing typedef Z<int long *, float double & *> z6;
-[v] genarate diagram with typedefs of classes
-[v] genarate diagram with aggretaions/compositions in typedef of templates.
-[] do the same than previous point to templates inside of classes.
-[] do options to the previous points (sometimes is too verbose).
-[v] parse enum with dummy rule.
  cat out/trace_t039.cpp.gv | dot -Tpng > out/trace_t039.cpp.gv.png; eog out/trace_t039.cpp.gv.png
-[v] save enum_name in ts.
-[] parse enum full mode.
-[v] declare enum inside namespaces.
-[] declare enum inside classes.
-[v] parsing dummy ctor_initializer.
-[] parsing full ctor_initializer.
-[v] parsing #ifndef
-[v] saving  #ifndef <ID> int ts
-[v] parsing #endif
-[] maybe check the number of #endif is paired with his #ifndef
-[v] parsing #define id
    this is necesary for things like this
    #ifndef parser_descent_h
    #define parser_descent_h
    cat out/trace_t040.cpp.gv | dot -Tpng > out/trace_t040.cpp.gv.png; eog out/trace_t040.cpp.gv.png
    -[] pass other tokens until '\n'
-[v] dummy parsing #define VIRTUAL 351
-[] parsing #define id full
-[v] parsing declarator table[dummy]
-[-] fixing void calls(t_vector_trace_nodes & vector);
  the problem is vector have have the same text than the std::vector ...
  i workarround for the moment... :-)
-[v] parsing trace.cpp fix this
    int c_trace_node::order_static = 0;
-[] lex in trace.cpp have several errors with characters ' \ ...
    using scanner string from http://scottmcpeak.com/elkhound/sources/elsa/cc.lex
-[v] get the string formation from elsa http://scottmcpeak.com/elkhound/sources/elsa/cc.lex
-[v] parsing enum in enum t_class_specifier_status class_specifier_status;
    t_class_specifier_status must be a enum type
-[v] fix this weid include with a link: 
    working/abidos/processor/src$ ln -s ../../preprocessor/ts.h preprocessor_ts.h
-[v] fix parsing int *a, *b;
-[] fix parsing int *a, *b, c;
-[v] fix compile extern "C" { }
  cat out/trace_t042.cpp.gv | dot -Tpng > out/trace_t042.cpp.gv.png; eog out/trace_t042.cpp.gv.png
-[v] fix     
    typedef union {
          int number;
          char iden[ID_MAX_LEN];
    } YYLVAL;
-[] fix char iden[ID_MAX_LEN]; is no saved in ts test with free char i[4];
    typedef union {
          int number;
          char iden[ID_MAX_LEN];
    } YYLVAL;
-[v] fix NO_CLASS_NAME#1 must increase, it was done see t027.cpp
-[v] fix t027 herence from typedef
-[v] creating links to real code in test dir
   hevia@vulcano:~/working/abidos/processor/test$ ../scripts/create_links.pl

